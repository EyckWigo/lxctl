#!/usr/bin/perl

use strict;
use warnings;
use Lxc;
use Getopt::Long;
use Pod::Usage;
use Carp;

our %options = ();
our %commands = (
	'create' => \&cmd_create,
	'destroy' => \&cmd_destroy,
	'set' => \&cmd_set,
	'list' => \&cmd_list,
	'start' => \&cmd_start,
	'stop' => \&cmd_stop,
	'freeze' => \&cmd_freeze,
	'unfreeze' => \&cmd_unfreeze
	);

sub check_existance
{
	croak "Container lxc conf directory $Lxc::LXC_CONF_DIR/$options{'contname'} already exists!\n\n" 
		if -e "$Lxc::LXC_CONF_DIR/$options{'contname'}";
	croak "Container root directory $Lxc::ROOTS_PATH/$options{'contname'} already exists!\n\n"
		if -e "$Lxc::ROOTS_PATH/$options{'contname'}";
	croak "Container root logical volume /dev/$Lxc::VG/$options{'contname'} already exists!\n\n"
		if -e "/dev/$Lxc::VG/$options{'contname'}";

	return;
}

###########################################
# Begin of cmd_create functions
###########################################

sub create_root
{
	croak "Failed to create logical volume $options{'contname'}!\n\n"
		if system("lvcreate -L $options{'rootsz'} -n $options{'contname'} $Lxc::VG 1>/dev/null");

	croak "Failed to create FS for $options{'contname'}!\n\n"
		if system("mkfs.ext4 /dev/$Lxc::VG/$options{'contname'} 1>/dev/null");

	croak "Failed to create directory $Lxc::ROOTS_PATH/$options{'contname'}!\n\n"
		if system("mkdir -p $Lxc::ROOTS_PATH/$options{'contname'} 1>/dev/null");

	croak "Failed to add fstab entry for $options{'contname'}!\n\n"
		if system("echo '/dev/$Lxc::VG/$options{'contname'} $Lxc::ROOTS_PATH/$options{'contname'} ext4 defaults 0 0' >> /etc/fstab");

	croak "Failed to mount FS for $options{'contname'}!\n\n"
		if system("mount $Lxc::ROOTS_PATH/$options{'contname'} 1>/dev/null");

	return;
}

sub check_create_options
{
	GetOptions(\%options, 'ipadd|ipaddr=s', 'hostname=s', 'ostemplate=s', 
		'config=s', 'root=s', 'pkgset=s', 'rootsz=s', 'netmask|mask=s',
		'defgw|gw=s', 'dns=s');

	$options{'ostemplate'} ||= "lucid_amd64";
	$options{'config'} ||= "$Lxc::CONFIG_PATH/$options{'contname'}";
	$options{'root'} ||= "$Lxc::ROOTS_PATH/$options{'contname'}";
	$options{'hostname'} ||= "$options{'contname'}";
	$options{'rootsz'} ||= "10G";

	$options{'ipadd'} || croak "You MUST specify IP address!\n\n";
	$options{'netmask'} || croak "You MUST specify network mask!\n\n";
	$options{'defgw'} || croak "You MUST specify default gateway!\n\n";
	$options{'dns'} || croak "You MUST specify DNS!\n\n";

	return;
}

sub deploy_template
{
	croak "Failed to untar template!\n\n"
		if system("tar xf $Lxc::TEMPLATES_PATH/$options{'ostemplate'}.tar.gz -C $Lxc::ROOTS_PATH/$options{'contname'} 1>/dev/null");

	return;
}

sub create_lxc_conf
{
	croak "Failed to create directory $Lxc::LXC_CONF_DIR/$options{'contname'}!\n\n"
		if system("mkdir -p $Lxc::LXC_CONF_DIR/$options{'contname'} 1>/dev/null");

	my $conf = "\
lxc.utsname = $options{'contname'}

lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $Lxc::ROOTS_PATH/$options{'contname'}/rootfs
lxc.mount  = $Lxc::LXC_CONF_DIR/$options{'contname'}/fstab

lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm

lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = br0
lxc.network.name = eth0
";

	my $fstab = "\
proc            $Lxc::ROOTS_PATH/$options{'contname'}/rootfs/proc         proc    nodev,noexec,nosuid 0 0
sysfs           $Lxc::ROOTS_PATH/$options{'contname'}/rootfs/sys          sysfs defaults  0 0
";

	open my $config_file, '>', "$Lxc::LXC_CONF_DIR/$options{'contname'}/config" or
		croak "Failed to create $Lxc::LXC_CONF_DIR/$options{'contname'}/config!\n\n";
	print $config_file $conf;
	close($config_file);

	open my $fstab_file, '>', "$Lxc::LXC_CONF_DIR/$options{'contname'}/fstab" or
		croak "Failed to create $Lxc::LXC_CONF_DIR/$options{'contname'}/fstab!\n\n";
	print $fstab_file $fstab;
	close($fstab_file);

	return;
}

sub cmd_create
{
	$options{'contname'} = shift @ARGV
		or croak "Name the container please!\n\n";

	check_existance();
	check_create_options();
	create_root();
	deploy_template();
	create_lxc_conf();
	set_ipadd();
	set_netmask();
	set_defgw();
	set_dns();
	set_hostname();

	return;
}

###########################################
# Begin of cmd_destroy functions
###########################################

sub cmd_destroy
{
	$options{'contname'} = shift @ARGV
		or croak "Name the container please!\n\n";

	eval {
		Lxc::stop($options{'contname'});
	} or do {
		print "VM is not running, continue...\n";
	};

	system("umount /dev/$Lxc::VG/$options{'contname'}");
	system("echo y | lvremove /dev/$Lxc::VG/$options{'contname'}");
	system("rm -r $Lxc::ROOTS_PATH/$options{'contname'}");
	system("rm -r $Lxc::LXC_CONF_DIR/$options{'contname'}");

	open(my $fstab_file, '<', "/etc/fstab") or
		croak " Failed to open /etc/fstab for reading!\n\n";

	my @fstab = <$fstab_file>;
	close $fstab_file;

	open($fstab_file, '>', "/etc/fstab") or
		croak " Failed to open /etc/fstab for writing!\n\n";

	for my $line (@fstab) {
		$line = "" if $line =~ m/^\/dev\/$Lxc::VG\/$options{'contname'}/mxs;
		print $fstab_file $line;
	}

	close $fstab_file;

	return;
}

###########################################
# Begin of cmd_set functions
###########################################

sub change_config #(filename, searchstring, newvalue)
{
	open(my $file, '<', "$_[0]") or
		croak " Failed to open $_[0]!\n\n";

	my @content = <$file>;

	close $file;

	open($file, '>', "$_[0]") or
		croak " Failed to open $_[0]!\n\n";

	for my $line (@content) {
		$line =~ s/($_[1]).*/$1 $_[2]/g;
		print $file $line;
	}

	close $file;
}

sub set_hostname
{
	defined($options{'hostname'}) or return;
	print "Setting hostname: $options{'hostname'}\n";

	open(my $hostname_file, '>', "$Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/hostname") or
		croak " Failed to open $Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/hostname!\n\n";

	seek $hostname_file,0,0;

	print $hostname_file $options{'hostname'};

	close $hostname_file;

	return;
}

sub set_ipadd
{
	defined($options{'ipadd'}) or return;

	print "Setting IP: $options{'ipadd'}\n";

	change_config("$Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/network/interfaces", 'address', $options{'ipadd'});

	return;
}

sub set_netmask
{
	defined($options{'netmask'}) or return;

	print "Setting netmask: $options{'netmask'}\n";

	change_config("$Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/network/interfaces", 'netmask', $options{'netmask'});

	return;
}

sub set_defgw
{
	defined($options{'defgw'}) or return;

	print "Setting gateway: $options{'defgw'}\n";

	change_config("$Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/network/interfaces", 'gateway', $options{'defgw'});

	return;
}

sub set_dns
{
	defined($options{'dns'}) or return;

	print "Setting DNS: $options{'dns'}\n";

	change_config("$Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/resolv.conf", 'nameserver', $options{'dns'});

	return;
}

sub set_searchdomain
{
	defined($options{'searchdomain'}) or return;

	print "Setting search domain: $options{'searchdomain'}\n";

	change_config("$Lxc::ROOTS_PATH/$options{'contname'}/rootfs/etc/resolv.conf", 'search', $options{'searchdomain'});

	return;
}

sub set_userpasswd
{
	defined($options{'userpasswd'}) or return;

	print "Setting password for user: $options{'userpasswd'}\n";

	croak "Failed to change password!\n\n"
		if system("echo '$options{'userpasswd'}' | chroot $Lxc::ROOTS_PATH/$options{'contname'}/rootfs/ chpasswd");

	return;
}

sub set_rootsz
{
	defined($options{'rootsz'}) or return;

	print "Setting root size: $options{'rootsz'}\n";

	$options{'rootsz'} =~ m/^\+\d+[bBsSkKmMgGtTpPeE]$/ or
		croak "Bad size!\n\n";

	croak "Failed to resize root LV!\n\n"
		if system("lvextend -L $options{'rootsz'} /dev/$Lxc::VG/$options{'contname'}");
	croak "Failed to resize root filesystem!\n\n"
		if system("resize2fs /dev/$Lxc::VG/$options{'contname'}");

	return;
}

sub set_cgroup
{
	my ($name, $value) = @_;

	defined($options{$name}) or return;

	print "Setting $name share: $options{$name}\n";

	$options{$name} =~ m/^\d+$/ or
		croak "Bad $name option!\n\n";

	eval {
		Lxc::set_cgroup($options{'contname'}, $value, $options{$name});

		Lxc::set_conf($options{'contname'}, "lxc.cgroup." . $value, $options{$name});
	} or do {
		print "$@";
		croak "Failed to change $name share!\n\n";
	};

	return;
}

sub cmd_set
{
	$options{'contname'} = shift @ARGV
		or croak "Name the container please!\n\n";

	GetOptions(\%options, 'ipadd|ipaddr=s', 'hostname=s', 'userpasswd=s', 
		'onboot=s', 'nameserver=s', 'searchdomain=s', 'rootsz=s', 
		'netmask|mask=s', 'defgw|gw=s', 'dns=s', 'cpu=s', 'mem=s', 'io=s');

	set_ipadd();
	set_netmask();
	set_defgw();
	set_dns();
	set_hostname();
	set_searchdomain();
	set_userpasswd();
	set_rootsz();
	set_cgroup('cpu', 'cpu.shares');
	set_cgroup('mem', 'memory.limit_in_bytes');
	set_cgroup('io', 'blkio.weight');

	return;
}

###########################################
# Begin of cmd_list functions
###########################################

#Helper functions for Onotole's cmd_list
my $tab = 15;

sub tab {
	my ($val) = @_;
	for (my $i = 0; $i < $val; $i++)
	{
		print " ";
	}

	return;
}

sub cmd_list
{
	my $ipaddr = 0;
	my $hostname = 0;

	GetOptions('ipaddr' => \$ipaddr, 'hostname' => \$hostname);

	my @vms = Lxc::ls();

	#Printing header
	print "VM_NAME";
	tab($tab - 7);

	print "STATE";
	tab($tab - 5);

	if ($hostname) {
		print "hostname";
		tab($tab - 8);
	}

	if ($ipaddr) {
		print "ip";
		tab ($tab - 2);
	}

	print "\n";

	my $vm_state;
	my $utsname;
	my $ip;
	foreach my $vm (@vms){
		eval {
			$vm_state = Lxc::status($vm);
			print "$vm";
			tab($tab - length($vm));

			print "$vm_state";
			tab($tab - length($vm_state));

			if ($hostname) {
				$utsname = Lxc::get_conf($vm, "lxc.utsname");
				print "$utsname";
				tab($tab - length($utsname));
			}

			if ($ipaddr) {
				$ip = Lxc::get_ip($vm);
				print "$ip" if ($ipaddr);
				tab($tab - length($ip));
			}
			print "\n\n";
		} or do {
			print "$@";
			croak "Failed to get information about containers!\n\n";
		}
	}

	return;
}

###########################################
# Begin of cmd_start functions
###########################################

sub cmd_start
{
	$options{'contname'} = shift @ARGV or
		croak "Name the container please!\n\n";

	eval {
		Lxc::start($options{'contname'});
	} or do {
		print "$@";
		croak "Cannot start $options{'contname'}!\n\n";
	};

	return;
}

###########################################
# Begin of cmd_stop functions
###########################################

sub cmd_stop
{
	$options{'contname'} = shift @ARGV or
		croak "Name the container please!\n\n";

	eval {
		Lxc::stop($options{'contname'});
	} or do {
		print "$@";
		croak "Cannot stop $options{'contname'}!\n\n";
	};

	return;
}

###########################################
# Begin of cmd_freeze functions
###########################################

sub cmd_freeze
{
	$options{'contname'} = shift @ARGV or
		croak "Name the container please!\n\n";

	eval {
		Lxc::freeze($options{'contname'});
	} or do {
		print "$@";
		croak "Cannot freeze $options{'contname'}!\n\n";
	};

	return;
}

###########################################
# Begin of cmd_unfreeze functions
###########################################

sub cmd_unfreeze
{
	$options{'contname'} = shift @ARGV or
		croak "Name the container please!\n\n";

	eval {
		Lxc::unfreeze($options{'contname'});
	} or do {
		print "$@";
		croak "Cannot unfreeze $options{'contname'}!\n\n";
	};

	return;
}

###########################################
# Begin of main part
###########################################

sub lets_rock
{
	my $help = 0;
	my $man = 0;

	$Getopt::Long::passthrough = 1;
	GetOptions('help|?' => \$help, 'man' => \$man) or pod2usage(2);
	pod2usage(1) if $help;
	pod2usage(-exitstatus => 0, -verbose => 2) if $man;
	pod2usage("No argument specified.") if (@ARGV == 0);
	Lxc::check();
	$Getopt::Long::passthrough = 0;

	my $action = shift @ARGV;

	exists($commands{ $action }) or croak "What is the $action?\n\n";
	
	$commands{$action}->();

	return;
}

lets_rock;

__END__

=head1 NAME

lxctl - Control various aspects of lxc.

=head1 SYNOPSIS

lxctl [action] [vmname] [options]

See lxctl --man or lxctl --help for more info

=head1 OPTIONS

=over 8

=item B<--help>

Print a breif help message and exists

=item B<--man>

Prints the manual page and exits.

=item B<start>

Starts container specified in 1st argument

B<Required arguments:>

	vmname - name of the container

=item B<stop>

Stops container specified in 1st argument

B<Required arguments:>

	vmname - name of the container

=item B<create>

Creates container.

B<Required arguments:>

	vmname - name of the container

	--ipaddr - IP address if the machine

	--netmask - network mask of the machine

	--defgw - default gateway of the machine

	--dns - primary DNS server

B<Optional arguments:>

	--ostemplate - template name, by default it is 'lucid_amd64'

	--config - path to configuration file, by default /etc/lxc/<container name> is used

	--root - path to root file system, by default /var/lxc/<container name> is used

	--pkgset - list of additional packages

	--rootsz - size of logical volume for root FS, by default it is 10G

	--hostname - sets the hostname of the machine, by default <container name> is used

=item B<set>

Changes container parameters.

B<Required arguments:>

	vmname - name of the container

B<Optional arguments:>

	--rootsz - increment of size of logical volume for root FS

	--ipaddr - IP address if the machine

	--netmask - network mask of the machine

	--defgw - default gateway of the machine

	--dns - primary DNS server

	--hostname - sets the hostname of the machine

	--userpasswd user:passwd - sets password for given user

	--onboot {yes,no} - makes containet [do not] start at boot

	--cpu - sets the CPU share of the container

	--mem - sets the memory share of the container (in bytes!)

	--io - sets the IO share of the container

=item B<freeze>

Freezes container

B<Required arguments:>

	vmname - name of the container

=item B<unfreeze>

Unfreezes container

B<Required arguments:>

	vmname - name of the container

=item B<list>

Lists all containers

B<Optional arguments:>

	--ipaddr - display with IP addr

	--hostname - display with hostname.

=back

=head1 DESCRIPTION

B<lxctl> controls lxc :)

Man page by Capitan Obvious.

=head1 AUTHOR

Anatoly Burtsev, E<lt>anatolyburtsev@yandex.ruE<gt>
Pavel Potapenkov, E<lt>ppotapenkov@gmail.comE<gt>
Vladimir Smirnov, E<lt>civil.over@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011 by Anatoly Burtsev, Pavel Potapenkov, Vladimir Smirnov

L<perlgpl>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.


=cut
